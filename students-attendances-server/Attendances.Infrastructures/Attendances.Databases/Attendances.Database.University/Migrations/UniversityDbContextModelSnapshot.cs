// <auto-generated />
using System;
using Attendances.Database.University.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Attendances.Database.University.Migrations
{
    [DbContext(typeof(UniversityDbContext))]
    partial class UniversityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Attendances.Domain.University.Entities.Courses.CourseInfo", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AttendanceModules")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ExternalId")
                        .HasColumnType("bigint");

                    b.Property<string>("Format")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Uuid");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("Uuid")
                        .IsUnique();

                    b.ToTable("CourseInfo", "public");
                });

            modelBuilder.Entity("Attendances.Domain.University.Entities.Courses.GroupInfo", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseUuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("ExternalId")
                        .HasColumnType("bigint");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Uuid");

                    b.HasIndex("CourseUuid");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("Uuid")
                        .IsUnique();

                    b.ToTable("GroupInfo", "public");
                });

            modelBuilder.Entity("Attendances.Domain.University.Entities.Lessons.LessonInfo", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("AttendanceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Attendances")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CourseUuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ExternalId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("GroupUuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Uuid");

                    b.HasIndex("CourseUuid");

                    b.HasIndex("GroupUuid");

                    b.HasIndex("Uuid")
                        .IsUnique();

                    b.ToTable("LessonInfo", "public");
                });

            modelBuilder.Entity("Attendances.Domain.University.Entities.Users.AccountInfo", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserUuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Uuid");

                    b.HasIndex("UserUuid")
                        .IsUnique();

                    b.HasIndex("Uuid")
                        .IsUnique();

                    b.ToTable("AccountInfo", "public");
                });

            modelBuilder.Entity("Attendances.Domain.University.Entities.Users.RfidMarkerInfo", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RfidValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Uuid");

                    b.HasIndex("Uuid")
                        .IsUnique();

                    b.ToTable("RfidMarkerInfo", "public");
                });

            modelBuilder.Entity("Attendances.Domain.University.Entities.Users.UserInfo", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("ExternalId")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Roles")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Uuid");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.HasIndex("Uuid")
                        .IsUnique();

                    b.ToTable("UserInfo", "public");
                });

            modelBuilder.Entity("CourseInfoUserInfo", b =>
                {
                    b.Property<Guid>("StudentUuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseUuid")
                        .HasColumnType("uuid");

                    b.HasKey("StudentUuid", "CourseUuid");

                    b.HasIndex("CourseUuid");

                    b.ToTable("CourseStudents", "public");
                });

            modelBuilder.Entity("CourseInfoUserInfo1", b =>
                {
                    b.Property<Guid>("TeacherUuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseUuid")
                        .HasColumnType("uuid");

                    b.HasKey("TeacherUuid", "CourseUuid");

                    b.HasIndex("CourseUuid");

                    b.ToTable("CourseTeachers", "public");
                });

            modelBuilder.Entity("GroupInfoUserInfo", b =>
                {
                    b.Property<Guid>("StudentUuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupUuid")
                        .HasColumnType("uuid");

                    b.HasKey("StudentUuid", "GroupUuid");

                    b.HasIndex("GroupUuid");

                    b.ToTable("GroupStudents", "public");
                });

            modelBuilder.Entity("Attendances.Domain.University.Entities.Courses.GroupInfo", b =>
                {
                    b.HasOne("Attendances.Domain.University.Entities.Courses.CourseInfo", "Course")
                        .WithMany("Groups")
                        .HasForeignKey("CourseUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Attendances.Domain.University.Entities.Lessons.LessonInfo", b =>
                {
                    b.HasOne("Attendances.Domain.University.Entities.Courses.CourseInfo", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Attendances.Domain.University.Entities.Courses.GroupInfo", "Group")
                        .WithMany()
                        .HasForeignKey("GroupUuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Course");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Attendances.Domain.University.Entities.Users.AccountInfo", b =>
                {
                    b.HasOne("Attendances.Domain.University.Entities.Users.UserInfo", "User")
                        .WithOne()
                        .HasForeignKey("Attendances.Domain.University.Entities.Users.AccountInfo", "UserUuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("CourseInfoUserInfo", b =>
                {
                    b.HasOne("Attendances.Domain.University.Entities.Courses.CourseInfo", null)
                        .WithMany()
                        .HasForeignKey("CourseUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Attendances.Domain.University.Entities.Users.UserInfo", null)
                        .WithMany()
                        .HasForeignKey("StudentUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseInfoUserInfo1", b =>
                {
                    b.HasOne("Attendances.Domain.University.Entities.Courses.CourseInfo", null)
                        .WithMany()
                        .HasForeignKey("CourseUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Attendances.Domain.University.Entities.Users.UserInfo", null)
                        .WithMany()
                        .HasForeignKey("TeacherUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupInfoUserInfo", b =>
                {
                    b.HasOne("Attendances.Domain.University.Entities.Courses.GroupInfo", null)
                        .WithMany()
                        .HasForeignKey("GroupUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Attendances.Domain.University.Entities.Users.UserInfo", null)
                        .WithMany()
                        .HasForeignKey("StudentUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Attendances.Domain.University.Entities.Courses.CourseInfo", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Lessons");
                });
#pragma warning restore 612, 618
        }
    }
}
